local Dart   = dart_core
local Utils  = dart_utils
local Module = dart_module


local mod = "inventory"
Module.createLogger(mod)("Monkey patching UICellContainer:InitControls()")


-- only auto-resize these container IDs (best guess)
function shouldAutoResize(container)
  return nil
    or container.ID == "actor_bag"
    or container.ID == "actor_trade"
    or container.ID == "actor_trade_bag"
    or container.ID == "npc_bag"
    or container.ID == "npc_trade"
    or container.ID == "npc_trade_bag"
end


function shouldScale(container)
  local config = Module.config(mod)

  return config.scaleEquipment
      or  container.ID ~= "actor_equ"
      and container.ID ~= "actor_belt"
      and container.ID ~= "actor_quick"
end


local InitControls = utils_ui.UICellContainer.InitControls

function utils_ui.UICellContainer:InitControls(owner, prof, ele_base)
  local config = Module.config(mod)
  local state  = Module.state(mod)

  local scale, padScale = config.scale, config.padScale
  local xmlAspectRatio  = state.xmlAspectRatio

  local gridSize = self.grid_size * scale
  local gridLine = self.grid_line * padScale

  if shouldAutoResize(self) then
    -- copy of code in underlying function
    -- necessary to call container:GetWidth()
    local container = self.use_frame
      and owner.xml:InitFrame(prof, ele_base)
      or  owner.xml:InitStatic(prof, ele_base)

    -- calculate how many cells can fit in the given width,
    -- then resize the cells to perfectly fill that space
    local width       = Utils.correctW(container:GetWidth(), xmlAspectRatio)
    local itemsPerRow = math.floor(width / (gridSize + gridLine))
    local cellSize    = width / itemsPerRow

    gridSize = cellSize - gridLine
  end

  -- grid_size doesn't stretch to aspect ratio but grid_line does
  if shouldScale(self) then
    self.grid_size = gridSize
    self.grid_line = Utils.correctW(gridLine, xmlAspectRatio)
  end

  return InitControls(self, owner, prof, ele_base)
end
