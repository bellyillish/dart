local Dart   = dart_core
local Module = dart_module
local Utils  = dart_utils


local mod    = "scopes"
local log    = Module.createLogger(mod)
local config = Dart.config.scopes


-- we're not as concerned about xmlAspectRatio here because all known
-- scopes are 1024x768, so we can just scale 1024 to the aspect ratio
-- it's actually better than relying on widths in the XML because those
-- are sloppy and all over the place
function resizeScope(XML, scope)
  local elements     = XML:query("auto_static", scope)
  local isBinoculars = XML:getElementName(scope) == "wpn_crosshair_bino"

  -- fix missing left and right fillers
  if #elements == 1 then
    local left = string.format(Dart.scopeFillerTemplate, isBinoculars
      and "wpn_crosshair_add_lblack"
      or  "wpn_crosshair_add_l"
    )

    local right = string.format(Dart.scopeFillerTemplate, isBinoculars
      and "wpn_crosshair_add_rblack"
      or  "wpn_crosshair_add_r"
    )

    XML:insertFromXMLString(left, scope)
    XML:insertFromXMLString(right, scope)
    elements = scope.kids
  end

  -- if still not 3 elements then skip
  if #elements ~= 3 then
    return
  end

  local w1 = tonumber(XML:safeGetAttrs(elements[1]).width)
  local w2 = tonumber(XML:safeGetAttrs(elements[2]).width)
  local w3 = tonumber(XML:safeGetAttrs(elements[3]).width)

  -- make sure main scope texture is first
  if w1 < w2 then
    w1, w2 = w2, w1
    elements[1], elements[2] = elements[2], elements[1]
  end
  if w1 < w3 then
    w1, w3 = w3, w1
    elements[1], elements[3] = elements[3], elements[1]
  end

  -- the binoculars are wider than other scopes
  local textureWidth = Utils.correctW(Dart.baseWidth, isBinoculars
    and Dart.ratio16x9
    or  Dart.ratio4x3
  )

  local fillerWidth  = (Dart.baseWidth - textureWidth) / 2

  XML:safeSetAttrs(elements[1], {
    x     = fillerWidth,
    width = textureWidth,
  })

  XML:safeSetAttrs(elements[2], {
    x     = 0,
    width = fillerWidth,
  })

  XML:safeSetAttrs(elements[3], {
    x     = fillerWidth + textureWidth,
    width = fillerWidth,
  })
end


function parseScopes(XML)
  XML:safeIterate(function(child)
    resizeScope(XML, child)
  end)
end


function on_xml_read()
  Module.registerModule(mod, "scopes", parseScopes)
end
