local Dart  = dart_core
local Utils = dart_utils
local DXML  = dart_dxml


-- (placeholder) check if a DART module is disabled
function isDisabled(mod)
  return false
end


-- create a module logger
-- suppresses repeated logs after [config.logLimit] times
function createLogger(mod)
  mod = (mod and string.upper(mod) ~= "DART")
    and "DART:" .. mod
    or  "DART"

  local calls = {}

  function log(formatter, ...)
    local message = string.format(formatter, ...)

    if not calls[message] then
      calls[message] = 0
    end

    if calls[message] >= Dart.config.logLimit then
      return
    end

    calls[message] = calls[message] + 1

    local note = calls[message] == Dart.config.logLimit
      and " (suppressing)"
      or  ""

    printf("[%s] %s%s", mod, message, note)
  end

  function clear()
    calls = {}
  end

  return log, clear
end


-- create a module XML cacher
function createCache(mod)
  local cache = {}

  local function has(path)
    return cache[path] ~= nil
  end

  local function set(path, XML)
    cache[path] = XML
  end

  local function apply(path, XML)
    DXML.transferXML(cache[path], XML)
  end

  local function clear()
    cache = {}
  end

  return {
    has   = has,
    set   = set,
    apply = apply,
    clear = clear,
  }
end


-- create a module's on_xml_read callback
function createXMLCallback(mod, targetAlias, ...)
  local log   = createLogger(mod)
  local cache = createCache(mod)
  local fns   = {...}

  return function(path, XML)
    local _, alias = DXML.splitPath(path)

    if targetAlias ~= alias then
      return
    end

    local replacement = Dart.xmlFileReplacements[path]

    if replacement then
      log("Replacing %s with %s", path, replacement)

      if DXML.requestReplacement(XML, replacement) then
        log("Done with %s", path)
        return
      else
        log("Unable to replace %s with %s", path, replacement)
      end
    end

    if cache.has(path) then
      return cache.apply(path, XML)
    end

    DXML.extendXMLObject(XML, path)

    local ratioLabel = Utils.getAspectRatioLabel(XML.aspectRatio)
    local clock = os.clock()

    for _, fn in ipairs(fns) do
      fn(XML)
    end

    log("Parsed %s (%s) in %.3fs", path, ratioLabel, os.clock() - clock)
    cache.set(path, XML)

    if DXML.getQueuedReplacement(path) then
      DXML.settleReplacement(XML, path)
    end
  end
end


-- create and register a module's on_xml_read callback
function registerModule(mod, alias, ...)
  if isDisabled(mod) then
    createLogger(mod)("Disabled, skipping %s", alias)
    return
  end

  RegisterScriptCallback("on_xml_read",
    createXMLCallback(mod, alias, ...)
  )
end
